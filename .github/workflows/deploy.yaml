name: CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ./backend
        run: |
          poetry install --no-root

      - name: Run Ruff
        working-directory: ./backend
        run: |
          poetry run ruff check src/

      - name: Run Mypy
        working-directory: ./backend
        run: |
          poetry run mypy src/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Add your Google Cloud service account key to GitHub secrets

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker europe-west4-docker.pkg.dev

      - name: Setup Google Application Credentials
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SA_KEY }}
          CLOUD_RUN_KEY: ${{ secrets.GCP_CLOUD_RUN_SA}}
        run: |
          mkdir -p tmp/keys
          echo $SERVICE_ACCOUNT_KEY > tmp/keys/google_application_credentials.json
          echo $CLOUD_RUN_KEY > tmp/keys/cloud_run_sa_key.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ../tmp/keys/google_application_credentials.json
        working-directory: ./terraform
        run: terraform init

      - name: Apply Terraform (artifact registry)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ../tmp/keys/google_application_credentials.json
          TF_VAR_project: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ vars.GCP_REGION }}
          TF_VAR_run_hash: ${{ github.sha }}
          TF_VAR_pdf_bucket: ${{ vars.GCP_PDF_BUCKET }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve -target=google_artifact_registry_repository.tldd -target=google_secret_manager_secret.resend_api_key
          gcloud secrets versions add resend-api-key --data-file=<(echo -n $RESEND_API_KEY)

      - name: Build and push Docker image
        working-directory: ./backend
        env:
          IMAGE_NAME: europe-west4-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/tldd/tldd:${{ github.sha }}
        run: |
          cp ../tmp/keys/cloud_run_sa_key.json .
          docker build -t $IMAGE_NAME . --platform linux/amd64
          docker push $IMAGE_NAME

      - name: Apply Terraform
        working-directory: ./terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ../tmp/keys/google_application_credentials.json
          TF_VAR_project: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ vars.GCP_REGION }}
          TF_VAR_run_hash: ${{ github.sha }}
          TF_VAR_pdf_bucket: ${{ vars.GCP_PDF_BUCKET }}
          TF_VAR_resend_api_key: ${{ secrets.RESEND_API_KEY }}
        run: terraform apply -auto-approve

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: yarn install

      - name: Build frontend
        working-directory: ./frontend
        run: yarn build

      - name: Push bundle.js to GCS
        working-directory: ./frontend
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ../tmp/keys/google_application_credentials.json
        run: |
          gcloud auth activate-service-account --key-file=../tmp/keys/google_application_credentials.json
          gsutil -m cp -r dist/bundle.js gs://tldd-frontend/
          gsutil acl ch -u AllUsers:R gs://tldd-frontend/bundle.js
          gsutil cors set cors-config.json gs://tldd-frontend
          gsutil setmeta -h "Cache-Control:no-store" gs://tldd-frontend/bundle.js
